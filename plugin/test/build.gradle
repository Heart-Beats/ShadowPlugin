apply plugin: 'com.android.application'

apply from: '../shadow.gradle' // 配置 plugin flavor 后 shadow plugin 使用需在 android{} 闭包 和 kotlin-android 插件之前

apply plugin: 'kotlin-android'

android {
    compileSdk libs.versions.compileSdk.get().toInteger()

    namespace 'com.hl.myplugin'
    defaultConfig {
        applicationId 'com.hl.test'
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

//    // 将插件 applicationId 设置为和宿主相同
//    productFlavors {
//        plugin {
//            applicationId HOST_APP_APPLICATION_ID
//        }
//    }
//
//    // 将插件的资源ID分区改为和宿主0x7F不同的值
//    aaptOptions {
//        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
//    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation project(path: ':plugin-aidl')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
//    pluginCompileOnly "com.tencent.shadow.core:runtime:$shadow_version"
}