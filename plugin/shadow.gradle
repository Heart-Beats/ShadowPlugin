/**
 * 这个在每个插件中必须应用，否则启动组件时不能被 shadow 识别，且必须在 android{} 闭包之后，
 *   否则插件获取的 compileSdkVersion 会为空
 **/
apply plugin: 'com.tencent.shadow.plugin'

android{
    // 将插件 applicationId 设置为和宿主相同
    productFlavors {
        plugin {
            applicationId HOST_APP_APPLICATION_ID
        }
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }
}

dependencies {
    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly("com.tencent.shadow.core:runtime:$shadow_version")
}


/*********************************************************************************************************/


def getPluginVariant(Project project, boolean isDebug) {
    def buildType = isDebug ? "Debug" : "Release"
    def selectVariant = "plugin${buildType}"

    println "[project: ${project.name}] 选择的 Variant --------- $selectVariant"
    return selectVariant
}

def setShadowPluginApk = { pluginApksOwner, pluginProject, isDebug ->
    println "[project: ${pluginProject.name}],    isDebug == ${isDebug}"

    def selectVariant = getPluginVariant(pluginProject, isDebug)

    // 未找到选择的 Variant，停止后续操作
    if (!selectVariant) {
        return
    }

    // 用来区分是否编译 Debug 版本插件
    def flavorSuffix = isDebug ? 'Debug' : 'Release'

    def pluginSelectFlavor = selectVariant

    if (selectVariant.contains('Debug')) {
        pluginSelectFlavor = selectVariant.split('Debug').first()
    } else if (selectVariant.contains('Release')) {
        pluginSelectFlavor = selectVariant.split('Release').first()
    }

    println "[project: ${pluginProject.name}] pluginSelectFlavor ------------------>  ${pluginSelectFlavor}"

    def buildType = flavorSuffix.toLowerCase()

    pluginApksOwner.businessName = "${pluginProject.name}-${buildType}"
    //businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
    pluginApksOwner.partKey = pluginProject.name

    def moduleRelativePathForRootProject = project.rootProject.relativePath(pluginProject.projectDir.path)

    if (pluginSelectFlavor.toLowerCase() == 'debug' || pluginSelectFlavor.toLowerCase() == 'release') {
        // flavor 仅仅为 debug 或 release 时的配置

        println "[project: ${pluginProject.name}] 开始默认编译的配置 -----------> buildTaskName == assemble${flavorSuffix}"

        pluginApksOwner.buildTask = "${pluginProject.path}:assemble${flavorSuffix}"
        // pluginApksOwner.apkName = "${pluginProject.name}-${buildType}.apk"
        def apkName = "${pluginProject.name}-${buildType}.apk"
        pluginApksOwner.apkPath = "${moduleRelativePathForRootProject}/build/outputs/apk/${buildType}/${apkName}"
    } else if (pluginSelectFlavor != selectVariant) {
        // 有自定义 flavor 时的配置
        def firstChar = pluginSelectFlavor.charAt(0)
        def firstCharUp = firstChar.toUpperCase()
        def buildTaskName = "${pluginSelectFlavor.replace(firstChar, firstCharUp)}${flavorSuffix}"

        println "[project: ${pluginProject.name}] 开始自定义 flavor 的配置 -----------> buildTaskName == assemble${buildTaskName}"

        pluginApksOwner.buildTask = "${pluginProject.path}:assemble${buildTaskName}"
        // pluginApksOwner.apkName = "${pluginProject.name}-${pluginSelectFlavor}-${buildType}.apk"
        def apkName = "${pluginProject.name}-${pluginSelectFlavor}-${buildType}.apk"
        pluginApksOwner.apkPath = "${moduleRelativePathForRootProject}/build/outputs/apk/${pluginSelectFlavor}/${buildType}/${apkName}"
    }
}

shadow {
    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('my-loader-debug.apk', ':my-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('my-runtime-debug.apk', ':my-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        setShadowPluginApk(owner, project(':test'), true)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                        //hostWhiteList = ["com.example.zhanglei.myapplication.fragments"]
                    }

                    pluginApk2 {
                        setShadowPluginApk(owner, project(':sunflower'), true)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('my-loader-release.apk', ':my-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('my-runtime-release.apk', ':my-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        setShadowPluginApk(owner, project(':test'), false)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }

                    pluginApk2 {
                        setShadowPluginApk(owner, project(':sunflower'), false)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }
                }
            }
        }

        loaderApkProjectPath = 'my-loader'
        runtimeApkProjectPath = 'my-runtime'

        // 压缩包的后缀名
        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        // 压缩包的前缀名 ， 生成名称规则为 "$prefix-${buildType.name}-$suffix.zip"
        archivePrefix = "plugin-${project.name}"
        destinationDir = "${getRootProject().getBuildDir()}"

        version = 1
        compactVersion = [1, 2, 3]
        uuidNickName = "0.0.1" //packagePlugin 方法会生成 UUID, 此可认为 UUID 的版本号

        // 可以指定 UUID, 默认随机生成
         uuid= UUID.nameUUIDFromBytes(HOST_APP_APPLICATION_ID.bytes).toString().toUpperCase()  // 根据宿主包名生成相应的 UUID
    }
}