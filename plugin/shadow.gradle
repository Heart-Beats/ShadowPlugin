/**
 * 这个在每个插件中必须应用，否则启动组件时不能被 shadow 识别，且必须在 android{} 闭包之后，
 *   否则插件获取的 compileSdkVersion 会为空
 **/
apply plugin: 'com.tencent.shadow.plugin'

//apply plugin: 'plugin.test'

static String getSelectVariant(Project project, boolean isDebug) {
    def rootDirPath = project.rootDir.path
    def projectDirPath = project.projectDir.path
    def moduleRelativePathForRootProject = project.rootProject.relativePath(projectDirPath)
    def pathSeparator = File.separator

    /*
    * 构建 project 相关的配置路径：
    * 如 {rootProjectPath}\.idea\modules\{project 在 rootProject 中的相对路径}\{rootProjectName}.{project.name}.iml
    */
    def parseModuleXmlPath = "${rootDirPath}${pathSeparator}.idea${pathSeparator}modules" +
            "${pathSeparator}${moduleRelativePathForRootProject}${pathSeparator}${project.rootProject.name}.${project.name}.iml"

    def selectVariant = ""
    if (new File(parseModuleXmlPath).exists()) {
        def module = new XmlSlurper().parse(parseModuleXmlPath)

        // 解析 project 配置相关的 XMl，找到对应的属性（SELECTED_BUILD_VARIANT）
        selectVariant = module.component.facet.configuration.option.find { node ->
            if (node.@name == "SELECTED_BUILD_VARIANT") {
                return true
            }
        }.@value
    } else {
        println "未能从配置文件中获取选择的 Variant， 使用默认的 Variant"

        def buildType = isDebug ? "Debug" : "Release"
        selectVariant = "plugin${buildType}"
    }

    println "[project: ${project.name}] 选择的 Variant --------- $selectVariant"
    return selectVariant
}

def setShadowPluginApk = { pluginApksOwner, pluginProject, isDebug ->
    println "[project: ${pluginProject.name}],    isDebug == ${isDebug}"

    def selectVariant = getSelectVariant(pluginProject, isDebug)

    // 未找到选择的 Variant，停止后续操作
    if (!selectVariant) {
        return
    }

    // 用来区分是否编译 Debug 版本插件
    def flavorSuffix = isDebug ? 'Debug' : 'Release'

    def pluginSelectFlavor = selectVariant

    if (selectVariant.contains('Debug')) {
        pluginSelectFlavor = selectVariant.split('Debug').first()
    } else if (selectVariant.contains('Release')) {
        pluginSelectFlavor = selectVariant.split('Release').first()
    }

    println "[project: ${pluginProject.name}] pluginSelectFlavor ------------------>  ${pluginSelectFlavor}"

    def buildType = flavorSuffix.toLowerCase()

    pluginApksOwner.businessName = "${pluginProject.name}-${buildType}"
    //businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
    pluginApksOwner.partKey = pluginProject.name

    def moduleRelativePathForRootProject = project.rootProject.relativePath(pluginProject.projectDir.path)

    if (pluginSelectFlavor.toLowerCase() == 'debug' || pluginSelectFlavor.toLowerCase() == 'release') {
        // flavor 仅仅为 debug 或 release 时的配置

        println "[project: ${pluginProject.name}] 开始默认编译的配置 -----------> buildTaskName == assemble${flavorSuffix}"

        pluginApksOwner.buildTask = "${pluginProject.path}:assemble${flavorSuffix}"
        // pluginApksOwner.apkName = "${pluginProject.name}-${buildType}.apk"
        def apkName = "${pluginProject.name}-${buildType}.apk"
        pluginApksOwner.apkPath = "${moduleRelativePathForRootProject}/build/outputs/apk/${buildType}/${apkName}"
    } else if (pluginSelectFlavor != selectVariant) {
        // 有自定义 flavor 时的配置
        def firstChar = pluginSelectFlavor.charAt(0)
        def firstCharUp = firstChar.toUpperCase()
        def buildTaskName = "${pluginSelectFlavor.replace(firstChar, firstCharUp)}${flavorSuffix}"

        println "[project: ${pluginProject.name}] 开始自定义 flavor 的配置 -----------> buildTaskName == assemble${buildTaskName}"

        pluginApksOwner.buildTask = "${pluginProject.path}:assemble${buildTaskName}"
        // pluginApksOwner.apkName = "${pluginProject.name}-${pluginSelectFlavor}-${buildType}.apk"
        def apkName = "${pluginProject.name}-${pluginSelectFlavor}-${buildType}.apk"
        pluginApksOwner.apkPath = "${moduleRelativePathForRootProject}/build/outputs/apk/${pluginSelectFlavor}/${buildType}/${apkName}"
    }
}

shadow {
    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('my-loader-debug.apk', ':my-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('my-runtime-debug.apk', ':my-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        setShadowPluginApk(owner, project(':test'), true)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                        //hostWhiteList = ["com.example.zhanglei.myapplication.fragments"]
                    }

                    pluginApk2 {
                        setShadowPluginApk(owner, project(':sunflower'), true)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('my-loader-release.apk', ':my-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('my-runtime-release.apk', ':my-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        setShadowPluginApk(owner, project(':test'), false)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }

                    pluginApk2 {
                        setShadowPluginApk(owner, project(':sunflower'), false)
                        //hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
                    }
                }
            }
        }

        loaderApkProjectPath = 'my-loader'
        runtimeApkProjectPath = 'my-runtime'

        // 压缩包的后缀名
        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        // 压缩包的前缀名 ， 生成名称规则为 "$prefix-${buildType.name}-$suffix.zip"
        archivePrefix = "plugin-${project.name}"
        destinationDir = "${getRootProject().getBuildDir()}"

        version = 1
        compactVersion = [1, 2, 3]
        uuidNickName = "0.0.1" //packagePlugin 方法会生成 UUID, 此可认为 UUID 的版本号

        // 可以指定 UUID, 默认随机生成
         uuid= UUID.nameUUIDFromBytes(HOST_APP_APPLICATION_ID.bytes).toString().toUpperCase()  // 根据宿主包名生成相应的 UUID
    }
}

// 打包任务执行完成后重命名
//project.afterEvaluate {
//
//    tasks.findAll {
//        it.name.endsWith('packageReleasePlugin') || it.name.endsWith('packageDebugPlugin')
//    }.forEach {
//        it.doLast { pluginTask ->
//            renamePluginZipName(pluginTask)
//        }
//    }
//}
//
///**
// *  重命名插件的压缩包名
// */
//def renamePluginZipName(Task pluginTask) {
//    def pluginTaskName = pluginTask.name
//
//
//    def pluginDestinationDir = getRootProject().getBuildDir()
//
//    // 获取插件压缩包的名称
//    def pluginZipName = pluginTaskName.contains('Release') ? "plugin-release.zip" : "plugin-debug.zip"
//
//    def pluginZipFile = new File(pluginDestinationDir, pluginZipName)
//
//    if (pluginZipFile.exists()) {
//        def newPluginZipName = pluginZipName.replace('-', "-${pluginTask.project.name}-")
//        def newPluginZipFile = new File(pluginDestinationDir, newPluginZipName)
//        if (newPluginZipFile.exists()) {
//            newPluginZipFile.delete()
//        }
//
//        def renameSuccess = pluginZipFile.renameTo(newPluginZipFile)
//
//        println "重命名 ${pluginZipFile.name} ---------> ${newPluginZipName} ${renameSuccess ? '成功' : '失败'}"
//    } else {
//        println "未找到插件压缩包： ${pluginZipFile} "
//    }
//}